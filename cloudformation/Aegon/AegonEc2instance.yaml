AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  imageidLinux:
    Type: String
    Description: "image id"
  imageidWindows:
    Type: String
    Description: "image id"
  instancetype:
    Type: String
    Description: "instance Name"
  AvailabilityZoneLinux:
    Type: String
    Description: "availabilityzone Name"
  AvailabilityZoneWindows:
    Type: String
    Description: "availabilityzone Name"
  keyname:
    Type: String
    Description: "This is to key pair" 
  AvailabilityZone:
    Type: String
    Description: "availabilityzone Name" 

Resources:
  ec2instanceLinux:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: 
        !Ref imageidLinux
      InstanceType:
         !Ref instancetype
      AvailabilityZone: 
        !Ref AvailabilityZoneLinux
      SecurityGroups: 
        -
            !Ref SecuirtyGroupLinux
      Tags: 
        - 
          Key: Name
          Value: "Linux instance"
      KeyName:
        !Ref keyname
      BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs: 
             DeleteOnTermination: True                                                
             VolumeSize: 8
             VolumeType: gp2
        -
          DeviceName: /dev/xvdb
          Ebs: 
             DeleteOnTermination: True                                                
             VolumeSize: 1
             VolumeType: gp2
      UserData:
        Fn::Base64: 
           !Sub |
             #!/bin/bash -xe
             yum update -y
             sudo yum update -y
             sudo yum install httpd -y
             sudo service httpd start
             sudo chkconfig httpd on
             output=$(file -s /dev/xvdb | awk '{print $NF}')
             if [[ $output ==  data ]]
             then 
             mkfs -t xfs /dev/xvdb
             fi             
             mount /dev/xvdb /var/www/html/
             echo "<html><body><h1>Hello AWS World-running on Linux-on port 80</h1>" >> /var/www/html/index.html
             echo "<h1>running pwd command</h1>" >> /var/www/html/index.html
             echo "`pwd`" >> /var/www/html/index.html
             echo "<h1>running ls command</h1>" >> /var/www/html/index.html
             echo "`ls -ltr`</body></html>" >> /var/www/html/index.html
             echo "/dev/xvdb /var/www/html/  xfs  defaults,nofail  0  2" >> /etc/fstab
  SecuirtyGroupLinux:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "This is security group by cloudformation"
      SecurityGroupIngress: 
        -
          SourceSecurityGroupId: !GetAtt SecuirtyGroupLB.GroupId
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
        -
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: TCP

  ec2instanceWindows:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: 
        !Ref imageidWindows
      InstanceType:
         !Ref instancetype
      AvailabilityZone: 
        !Ref AvailabilityZoneWindows
      SecurityGroups: 
        -
            !Ref SecuirtyGroupWindows
      Tags: 
        - 
          Key: Name
          Value: "Windows instance"
      KeyName:
        !Ref keyname
      BlockDeviceMappings:
        -
          DeviceName: /dev/xvda
          Ebs: 
             DeleteOnTermination: True                                                
             VolumeSize: 8
             VolumeType: gp2 
      UserData:
        Fn::Base64:
           !Sub | 
             <powershell>
             Set-ExecutionPolicy Unrestricted -Force
             New-Item -ItemType directory -Path 'C:\temp'
             
             # Install IIS and Web Management Tools.
             Import-Module ServerManager
             install-windowsfeature web-server, web-webserver -IncludeAllSubFeature
             install-windowsfeature web-mgmt-tools
             </powershell>
  SecuirtyGroupWindows:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "This is security group by cloudformation"
      SecurityGroupIngress: 
        -
          SourceSecurityGroupId: !GetAtt SecuirtyGroupLB.GroupId
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
        -
          CidrIp: 0.0.0.0/0
          FromPort: 3389
          ToPort: 3389
          IpProtocol: TCP
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: "POCLB"
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt SecuirtyGroupLB.GroupId
      Subnets: 
        - 
          subnet-f579b993
        - 
          subnet-c42fdf8c
      Type: application

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: '30'
      HealthCheckPath: '/'
      HealthCheckPort: '80'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: '5'
      HealthyThresholdCount: '2'
      UnhealthyThresholdCount: '2'
      Matcher: 
          HttpCode: 200
      Name: TG
      Port: 80
      Protocol: HTTP
      Targets: 
        -  Id:
              !Ref ec2instanceLinux 
           Port: 80
        -  Id:
              !Ref ec2instanceWindows
           Port: 80
      VpcId: vpc-92213ef5
  
  SecuirtyGroupLB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "This is security group by cloudformation"
      SecurityGroupIngress: 
        -
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
  
      